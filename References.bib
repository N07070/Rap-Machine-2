
@article{oliveira_automatic_nodate,
	title = {Automatic generation of poetry: an overview},
	abstract = {This paper is about the automatic generation of creative text, more precisely the automatic generation of poetry. It starts by presenting two possible categorisations for systems that aim generating poetry and then makes a brief overview on the existing attempts to this subject based on what can be found in the literature.},
	language = {en},
	author = {Oliveira, Hugo Goncalo},
	pages = {7},
	file = {Automatic_generation_of_poetry_an_overview.pdf:C\:\\Users\\eitia\\OneDrive\\Bureau\\Licence Histoire mineure Anglais\\L3 Histoire Anglais\\S5\\Intiation à Python\\Automatic_generation_of_poetry_an_overview.pdf:application/pdf}
}

@inproceedings{potash_ghostwriter:_2015,
	address = {Lisbon, Portugal},
	title = {{GhostWriter}: {Using} an {LSTM} for {Automatic} {Rap} {Lyric} {Generation}},
	shorttitle = {{GhostWriter}},
	url = {http://aclweb.org/anthology/D15-1221},
	doi = {10.18653/v1/D15-1221},
	abstract = {This paper demonstrates the effectiveness of a Long Short-Term Memory language model in our initial efforts to generate unconstrained rap lyrics. The goal of this model is to generate lyrics that are similar in style to that of a given rapper, but not identical to existing lyrics: this is the task of ghostwriting. Unlike previous work, which deﬁnes explicit templates for lyric generation, our model deﬁnes its own rhyme scheme, line length, and verse length. Our experiments show that a Long Short-Term Memory language model produces better “ghostwritten” lyrics than a baseline model.},
	language = {en},
	urldate = {2019-11-01},
	booktitle = {Proceedings of the 2015 {Conference} on {Empirical} {Methods} in {Natural} {Language} {Processing}},
	publisher = {Association for Computational Linguistics},
	author = {Potash, Peter and Romanov, Alexey and Rumshisky, Anna},
	year = {2015},
	pages = {1919--1924},
	file = {GhostWriter - Using an LSTM for Automatic Rap Lyric Generation.pdf:C\:\\Users\\eitia\\OneDrive\\Bureau\\Licence Histoire mineure Anglais\\L3 Histoire Anglais\\S5\\Intiation à Python\\GhostWriter - Using an LSTM for Automatic Rap Lyric Generation.pdf:application/pdf}
}

@article{sutskever_generating_nodate,
	title = {Generating {Text} with {Recurrent} {Neural} {Networks}},
	abstract = {Recurrent Neural Networks (RNNs) are very powerful sequence models that do not enjoy widespread use because it is extremely difﬁcult to train them properly. Fortunately, recent advances in Hessian-free optimization have been able to overcome the difﬁculties associated with training RNNs, making it possible to apply them successfully to challenging sequence problems. In this paper we demonstrate the power of RNNs trained with the new Hessian-Free optimizer (HF) by applying them to character-level language modeling tasks. The standard RNN architecture, while effective, is not ideally suited for such tasks, so we introduce a new RNN variant that uses multiplicative (or “gated”) connections which allow the current input character to determine the transition matrix from one hidden state vector to the next. After training the multiplicative RNN with the HF optimizer for ﬁve days on 8 high-end Graphics Processing Units, we were able to surpass the performance of the best previous single method for characterlevel language modeling – a hierarchical nonparametric sequence model. To our knowledge this represents the largest recurrent neural network application to date.},
	language = {en},
	author = {Sutskever, Ilya and Martens, James and Hinton, Geoffrey},
	pages = {8},
	file = {LANG-RNN.pdf:C\:\\Users\\eitia\\OneDrive\\Bureau\\Licence Histoire mineure Anglais\\L3 Histoire Anglais\\S5\\Intiation à Python\\LANG-RNN.pdf:application/pdf}
}

@article{malmi_dopelearning:_2016,
	title = {{DopeLearning}: {A} {Computational} {Approach} to {Rap} {Lyrics} {Generation}},
	shorttitle = {{DopeLearning}},
	url = {http://arxiv.org/abs/1505.04771},
	doi = {10.1145/2939672.2939679},
	abstract = {Writing rap lyrics requires both creativity to construct a meaningful, interesting story and lyrical skills to produce complex rhyme patterns, which form the cornerstone of good ﬂow. We present a rap lyrics generation method that captures both of these aspects. First, we develop a prediction model to identify the next line of existing lyrics from a set of candidate next lines. This model is based on two machinelearning techniques: the RankSVM algorithm and a deep neural network model with a novel structure. Results show that the prediction model can identify the true next line among 299 randomly selected lines with an accuracy of 17\%, i.e., over 50 times more likely than by random. Second, we employ the prediction model to combine lines from existing songs, producing lyrics with rhyme and a meaning. An evaluation of the produced lyrics shows that in terms of quantitative rhyme density, the method outperforms the best human rappers by 21\%. The rap lyrics generator has been deployed as an online tool called DeepBeat, and the performance of the tool has been assessed by analyzing its usage logs. This analysis shows that machine-learned rankings correlate with user preferences.},
	language = {en},
	urldate = {2019-11-01},
	journal = {Proceedings of the 22nd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining - KDD '16},
	author = {Malmi, Eric and Takala, Pyry and Toivonen, Hannu and Raiko, Tapani and Gionis, Aristides},
	year = {2016},
	note = {arXiv: 1505.04771},
	keywords = {Computer Science - Artificial Intelligence, Computer Science - Computation and Language, Computer Science - Machine Learning, Computer Science - Neural and Evolutionary Computing, H.3.3, I.2.7},
	pages = {195--204},
	annote = {Comment: This is a pre-print of an article appearing at KDD'16},
	file = {DopeLearning - A Computational Approach to Rap Lyrics Generation.pdf:C\:\\Users\\eitia\\OneDrive\\Bureau\\Licence Histoire mineure Anglais\\L3 Histoire Anglais\\S5\\Intiation à Python\\DopeLearning - A Computational Approach to Rap Lyrics Generation.pdf:application/pdf}
}

@article{hirjee_using_2010,
	title = {Using {Automated} {Rhyme} {Detection} to {Characterize} {Rhyming} {Style} in {Rap} {Music}},
	volume = {5},
	issn = {15595749},
	url = {https://kb.osu.edu/dspace/handle/1811/48548},
	doi = {10.18061/1811/48548},
	abstract = {Imperfect and internal rhymes are two important features in rap music previously ignored in the music information retrieval literature. We developed a method of scoring potential rhymes using a probabilistic model based on phoneme frequencies in rap lyrics. We used this scoring scheme to automatically identify internal and line-final rhymes in song lyrics and demonstrated the performance of this method compared to rules-based models. We then calculated higher-level rhyme features and used them to compare rhyming styles in song lyrics from different genres, and for different rap artists. We found that these detected features corresponded to realworld descriptions of rhyming style and were strongly characteristic of different rappers, resulting in potential applications to style-based comparison, music recommendation, and authorship identification.},
	language = {en},
	number = {4},
	urldate = {2019-11-01},
	journal = {Empirical Musicology Review},
	author = {Hirjee, Hussein and Brown, Daniel},
	year = {2010},
	pages = {121--145},
	file = {Using Automated Rhyme Detection to characterize rhyming style in Rap.pdf:C\:\\Users\\eitia\\OneDrive\\Bureau\\Licence Histoire mineure Anglais\\L3 Histoire Anglais\\S5\\Intiation à Python\\Using Automated Rhyme Detection to characterize rhyming style in Rap.pdf:application/pdf}
}

@article{paupier_how_2018,
	address = {Toronto, Ontario},
	title = {How to build and deploy a lyrics generation model — framework agnostic},
	url = {https://towardsdatascience.com/how-to-build-and-deploy-a-lyrics-generation-model-framework-agnostic-589f3026fd53},
	language = {English},
	urldate = {2019-10-28},
	author = {Paupier, François},
	month = sep,
	year = {2018}
}

@article{nikolaev_generating_2018,
	address = {Ontario, Toronto},
	title = {Generating {Drake} {Rap} {Lyrics} using {Language} {Models} and {LSTMs}},
	url = {https://towardsdatascience.com/generating-drake-rap-lyrics-using-language-models-and-lstms-8725d71b1b12},
	language = {English},
	urldate = {2019-10-28},
	author = {Nikolaev, Ruslan},
	month = apr,
	year = {2018}
}

@article{surma_text_2018,
	title = {Text {Predictor} - {Generating} {Rap} {Lyrics}},
	url = {https://towardsdatascience.com/text-predictor-generating-rap-lyrics-with-recurrent-neural-networks-lstms-c3a1acbbda79},
	urldate = {2019-10-28},
	journal = {Toronto, Ontario},
	author = {Surma, Greg},
	month = oct,
	year = {2018}
}

@misc{paupier_raplyrics-scraper_2018,
	type = {RapLyrics-Scraper},
	title = {{RapLyrics}-{Scraper}},
	url = {https://github.com/fpaupier/RapLyrics-Scraper},
	language = {English},
	urldate = {2019-10-28},
	journal = {Github},
	author = {Paupier, François},
	month = sep,
	year = {2018}
}

@misc{raiman_nano_2015,
	type = {Hosting for software development version control},
	title = {Nano size {Theano} {LSTM} module},
	url = {https://github.com/JonathanRaiman/theano_lstm},
	language = {English},
	urldate = {2019-10-28},
	journal = {Github},
	author = {Raiman, Jonathan},
	month = mar,
	year = {2015}
}

@misc{chollet_deep_2018,
	type = {Hosting for software development version control},
	title = {Deep {Learning} for humans},
	url = {https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py},
	language = {English},
	urldate = {2019-10-28},
	journal = {Github},
	author = {Chollet, François},
	month = dec,
	year = {2018}
}

@misc{nikolaev_drake-lyric-generator_2018,
	type = {Hosting for software development version control},
	title = {Drake-lyric-generator},
	url = {https://github.com/nikolaevra/drake-lyric-generator},
	language = {English},
	urldate = {2019-10-28},
	journal = {Github},
	author = {Nikolaev, Ruslan},
	month = apr,
	year = {2018}
}
